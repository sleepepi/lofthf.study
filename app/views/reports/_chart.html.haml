- show_single = defined?(single) ? single : false
- overall_visible = defined?(overall) ? overall : false
- individual_visible = defined?(individual) ? individual : true
- show_data_labels = defined?(data_labels) ? data_labels : false

- randomization_report = (report.report_type == "randomizations_by_site_by_month" && Report::EXPECTED_RANDOMIZATIONS.present? && params[:site].blank?)

- offset = params[:site].blank? ? (randomization_report ? 2 : 1) : 0
- series = params[:site].blank? ? [{ name: "Overall", visible: overall_visible, current_total: 0, data: [] }] : []
- ((report.header || [])[1..] || []).each_with_index do |header, site_index|
  - next if show_single && params[:site].to_i != header["id"]
  - site = params[:site].blank? ? site_index + offset : 0
  - series[site] = { name: header["label"], data: [] } if params[:site].blank? || params[:site].to_i == header["id"]

-# Set range to display only past X months
- total_rows = report.reverse_report_rows.count
- range = params[:range].to_s.match(/(\d*)mo/)
- range = range.present? ? range[1].to_i : total_rows

- report.reverse_report_rows.each_with_index do |row, row_index|
  - if params[:site].blank?
    - series[0][:current_total] += row.result["count"]
    - series[0][:data] << series[0][:current_total] if total_rows - row_index <= range
  - (row.result["sites"] || []).each_with_index do |site_hash, site_index|
    - next if (show_single || params[:site].present?) && params[:site].to_i != site_hash["site_id"]
    - site = params[:site].blank? ? site_index + offset : 0
    - series[site][:current_total] ||= 0
    - series[site][:current_total] += site_hash["count"]
    - series[site][:data] << series[site][:current_total] if total_rows - row_index <= range
    - series[site][:visible] = individual_visible || params[:site].present?

- categories = []
- report.reverse_report_rows.each_with_index do |row, row_index|
  - categories << row.result["label"] if total_rows - row_index <= range

- if randomization_report
  - series[1] = { name: "Expected", data: [], visible: false, dashStyle: "shortdot" }
  - Report::EXPECTED_RANDOMIZATIONS[total_rows - range...total_rows].each_with_index do |count, row_index|
    - series[1][:data] << count.round

.w-100.mb-3{ data: { object: "draw-chart", series: series.to_json, categories: categories.to_json, title: report.name, yaxis: "# #{report.name}", xaxis: nil, labels: show_data_labels.to_json } }
